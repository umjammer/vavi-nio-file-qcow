package vavi.nio.file.qcow.jna.libqcow;

import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.LongByReference;
import com.sun.jna.ptr.NativeLongByReference;
import com.sun.jna.ptr.PointerByReference;
import com.sun.jna.ptr.ShortByReference;
import java.nio.ByteBuffer;
import java.nio.IntBuffer;
import java.nio.LongBuffer;
import java.nio.ShortBuffer;

/**
 * JNA Wrapper for library <b>libqcow</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface LibqcowLibrary extends Library {

    String JNA_LIBRARY_NAME = "qcow";
    NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(LibqcowLibrary.JNA_LIBRARY_NAME);
    LibqcowLibrary INSTANCE = Native.load(LibqcowLibrary.JNA_LIBRARY_NAME, LibqcowLibrary.class);

    int LIBQCOW_ACCESS_FLAG_READ = 0x01;
    int LIBQCOW_ACCESS_FLAG_WRITE = 0x02;

    int LIBQCOW_ERROR_DOMAIN_ARGUMENTS = 'a';
    int LIBQCOW_ERROR_DOMAIN_CONVERSION = 'c';
    int LIBQCOW_ERROR_DOMAIN_COMPRESSION = 'C';
    int LIBQCOW_ERROR_DOMAIN_IO = 'I';
    int LIBQCOW_ERROR_DOMAIN_INPUT = 'i';
    int LIBQCOW_ERROR_DOMAIN_MEMORY = 'm';
    int LIBQCOW_ERROR_DOMAIN_OUTPUT = 'o';
    int LIBQCOW_ERROR_DOMAIN_RUNTIME = 'r';

    /**
     * Returns the library version<br>
     * Original signature : <code>char* libqcow_get_version()</code><br>
     * <i>native declaration : libqcow.h:16</i>
     */
    String libqcow_get_version();
    /**
     * Returns the access flags for reading<br>
     * Original signature : <code>int libqcow_get_access_flags_read()</code><br>
     * <i>native declaration : libqcow.h:22</i>
     */
    int libqcow_get_access_flags_read();
    /**
     * Returns the access flags for reading and writing<br>
     * Original signature : <code>int libqcow_get_access_flags_read_write()</code><br>
     * <i>native declaration : libqcow.h:28</i>
     */
    int libqcow_get_access_flags_read_write();
    /**
     * Returns the access flags for writing<br>
     * Original signature : <code>int libqcow_get_access_flags_write()</code><br>
     * <i>native declaration : libqcow.h:34</i>
     */
    int libqcow_get_access_flags_write();
    /**
     * Retrieves the narrow system string codepage<br>
     * A value of 0 represents no codepage, UTF-8 encoding is used instead<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_get_codepage(int*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:42</i><br>
     * @deprecated use the safer methods {@link #libqcow_get_codepage(java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_get_codepage(com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_get_codepage(IntByReference codepage, PointerByReference error);
    /**
     * Retrieves the narrow system string codepage<br>
     * A value of 0 represents no codepage, UTF-8 encoding is used instead<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_get_codepage(int*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:42</i>
     */
    int libqcow_get_codepage(IntBuffer codepage, PointerByReference error);
    /**
     * Sets the narrow system string codepage<br>
     * A value of 0 represents no codepage, UTF-8 encoding is used instead<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_set_codepage(int, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:51</i>
     */
    int libqcow_set_codepage(int codepage, PointerByReference error);
    /**
     * Determines if a file contains a QCOW file signature<br>
     * Returns 1 if true, 0 if not or -1 on error<br>
     * Original signature : <code>int libqcow_check_file_signature(const char*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:59</i><br>
     * @deprecated use the safer methods {@link #libqcow_check_file_signature(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_check_file_signature(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_check_file_signature(Pointer filename, PointerByReference error);
    /**
     * Determines if a file contains a QCOW file signature<br>
     * Returns 1 if true, 0 if not or -1 on error<br>
     * Original signature : <code>int libqcow_check_file_signature(const char*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:59</i>
     */
    int libqcow_check_file_signature(String filename, PointerByReference error);
    /**
     * Sets the verbose notification<br>
     * Original signature : <code>void libqcow_notify_set_verbose(int)</code><br>
     * <i>native declaration : libqcow.h:94</i>
     */
    void libqcow_notify_set_verbose(int verbose);
    /**
     * Sets the notification stream<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_notify_set_stream(FILE*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:101</i>
     */
    int libqcow_notify_set_stream(LibqcowLibrary.FILE stream, PointerByReference error);
    /**
     * Opens the notification stream using a filename<br>
     * The stream is opened in append mode<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_notify_stream_open(const char*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:110</i><br>
     * @deprecated use the safer methods {@link #libqcow_notify_stream_open(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_notify_stream_open(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_notify_stream_open(Pointer filename, PointerByReference error);
    /**
     * Opens the notification stream using a filename<br>
     * The stream is opened in append mode<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_notify_stream_open(const char*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:110</i>
     */
    int libqcow_notify_stream_open(String filename, PointerByReference error);
    /**
     * Closes the notification stream if opened using a filename<br>
     * Returns 0 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_notify_stream_close(libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:118</i>
     */
    int libqcow_notify_stream_close(PointerByReference error);
    /**
     * Frees an error<br>
     * Original signature : <code>void libqcow_error_free(libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:128</i>
     */
    void libqcow_error_free(PointerByReference error);
    /**
     * Prints a descriptive string of the error to the stream<br>
     * Returns the number of printed characters if successful or -1 on error<br>
     * Original signature : <code>int libqcow_error_fprint(libqcow_error_t*, FILE*)</code><br>
     * <i>native declaration : libqcow.h:135</i>
     */
    int libqcow_error_fprint(PointerByReference error, LibqcowLibrary.FILE stream);
    /**
     * Prints a descriptive string of the error to the string<br>
     * The end-of-string character is not included in the return value<br>
     * Returns the number of printed characters if successful or -1 on error<br>
     * Original signature : <code>int libqcow_error_sprint(libqcow_error_t*, char*, size_t)</code><br>
     * <i>native declaration : libqcow.h:144</i><br>
     * @deprecated use the safer methods {@link #libqcow_error_sprint(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, NativeLong)} and {@link #libqcow_error_sprint(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, NativeLong)} instead
     */
    @Deprecated
    int libqcow_error_sprint(PointerByReference error, Pointer string, NativeLong size);
    /**
     * Prints a descriptive string of the error to the string<br>
     * The end-of-string character is not included in the return value<br>
     * Returns the number of printed characters if successful or -1 on error<br>
     * Original signature : <code>int libqcow_error_sprint(libqcow_error_t*, char*, size_t)</code><br>
     * <i>native declaration : libqcow.h:144</i>
     */
    int libqcow_error_sprint(PointerByReference error, ByteBuffer string, NativeLong size);
    /**
     * Prints a backtrace of the error to the stream<br>
     * Returns the number of printed characters if successful or -1 on error<br>
     * Original signature : <code>int libqcow_error_backtrace_fprint(libqcow_error_t*, FILE*)</code><br>
     * <i>native declaration : libqcow.h:153</i>
     */
    int libqcow_error_backtrace_fprint(PointerByReference error, LibqcowLibrary.FILE stream);
    /**
     * Prints a backtrace of the error to the string<br>
     * The end-of-string character is not included in the return value<br>
     * Returns the number of printed characters if successful or -1 on error<br>
     * Original signature : <code>int libqcow_error_backtrace_sprint(libqcow_error_t*, char*, size_t)</code><br>
     * <i>native declaration : libqcow.h:162</i><br>
     * @deprecated use the safer methods {@link #libqcow_error_backtrace_sprint(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, NativeLong)} and {@link #libqcow_error_backtrace_sprint(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, NativeLong)} instead
     */
    @Deprecated
    int libqcow_error_backtrace_sprint(PointerByReference error, Pointer string, NativeLong size);
    /**
     * Prints a backtrace of the error to the string<br>
     * The end-of-string character is not included in the return value<br>
     * Returns the number of printed characters if successful or -1 on error<br>
     * Original signature : <code>int libqcow_error_backtrace_sprint(libqcow_error_t*, char*, size_t)</code><br>
     * <i>native declaration : libqcow.h:162</i>
     */
    int libqcow_error_backtrace_sprint(PointerByReference error, ByteBuffer string, NativeLong size);
    /**
     * Creates a file<br>
     * Make sure the value file is referencing, is set to NULL<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_initialize(libqcow_file_t**, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:176</i>
     */
    int libqcow_file_initialize(PointerByReference file, PointerByReference error);
    /**
     * Frees a file<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_free(libqcow_file_t**, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:184</i>
     */
    int libqcow_file_free(PointerByReference file, PointerByReference error);
    /**
     * Signals a file to abort its current activity<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_signal_abort(libqcow_file_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:192</i>
     */
    int libqcow_file_signal_abort(PointerByReference file, PointerByReference error);
    /**
     * Opens a file<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_open(libqcow_file_t*, const char*, int, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:200</i><br>
     * @deprecated use the safer methods {@link #libqcow_file_open(com.sun.jna.ptr.PointerByReference, java.lang.String, int, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_file_open(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_file_open(PointerByReference file, Pointer filename, int access_flags, PointerByReference error);
    /**
     * Opens a file<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_open(libqcow_file_t*, const char*, int, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:200</i>
     */
    int libqcow_file_open(PointerByReference file, String filename, int access_flags, PointerByReference error);
    /**
     * Closes a file<br>
     * Returns 0 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_close(libqcow_file_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:238</i>
     */
    int libqcow_file_close(PointerByReference file, PointerByReference error);
    /**
     * Determines if the file is locked<br>
     * Returns 1 if locked, 0 if not or -1 on error<br>
     * Original signature : <code>int libqcow_file_is_locked(libqcow_file_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:246</i>
     */
    int libqcow_file_is_locked(PointerByReference file, PointerByReference error);
    /**
     * Reads (media) data at the current offset<br>
     * Returns the number of bytes read or -1 on error<br>
     * Original signature : <code>ssize_t libqcow_file_read_buffer(libqcow_file_t*, void*, size_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:254</i>
     */
    LibqcowLibrary.ssize_t libqcow_file_read_buffer(PointerByReference file, Pointer buffer, NativeLong buffer_size, PointerByReference error);
    /**
     * Reads (media) data at a specific offset<br>
     * Returns the number of bytes read or -1 on error<br>
     * Original signature : <code>ssize_t libqcow_file_read_buffer_at_offset(libqcow_file_t*, void*, size_t, off64_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:264</i>
     */
    LibqcowLibrary.ssize_t libqcow_file_read_buffer_at_offset(PointerByReference file, Pointer buffer, NativeLong buffer_size, long offset, PointerByReference error);
    /**
     * Seeks a certain offset of the (media) data<br>
     * Returns the offset if seek is successful or -1 on error<br>
     * Original signature : <code>off64_t libqcow_file_seek_offset(libqcow_file_t*, off64_t, int, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:275</i>
     */
    long libqcow_file_seek_offset(PointerByReference file, long offset, int whence, PointerByReference error);
    /**
     * Retrieves the current offset of the (media) data<br>
     * Returns the offset if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_offset(libqcow_file_t*, off64_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:285</i><br>
     * @deprecated use the safer methods {@link #libqcow_file_get_offset(com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_file_get_offset(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_file_get_offset(PointerByReference file, LongByReference offset, PointerByReference error);
    /**
     * Retrieves the current offset of the (media) data<br>
     * Returns the offset if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_offset(libqcow_file_t*, off64_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:285</i>
     */
    int libqcow_file_get_offset(PointerByReference file, LongBuffer offset, PointerByReference error);
    /**
     * Sets the parent (backing) file of a differential image<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_set_parent_file(libqcow_file_t*, libqcow_file_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:294</i>
     */
    int libqcow_file_set_parent_file(PointerByReference file, PointerByReference parent_file, PointerByReference error);
    /**
     * Retrieves the format version<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_format_version(libqcow_file_t*, uint32_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:303</i><br>
     * @deprecated use the safer methods {@link #libqcow_file_get_format_version(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_file_get_format_version(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_file_get_format_version(PointerByReference file, IntByReference format_version, PointerByReference error);
    /**
     * Retrieves the format version<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_format_version(libqcow_file_t*, uint32_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:303</i>
     */
    int libqcow_file_get_format_version(PointerByReference file, IntBuffer format_version, PointerByReference error);
    /**
     * Retrieves the encryption method<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_encryption_method(libqcow_file_t*, uint32_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:312</i><br>
     * @deprecated use the safer methods {@link #libqcow_file_get_encryption_method(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_file_get_encryption_method(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_file_get_encryption_method(PointerByReference file, IntByReference encryption_method, PointerByReference error);
    /**
     * Retrieves the encryption method<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_encryption_method(libqcow_file_t*, uint32_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:312</i>
     */
    int libqcow_file_get_encryption_method(PointerByReference file, IntBuffer encryption_method, PointerByReference error);
    /**
     * Sets the keys<br>
     * This function needs to be used before one of the open functions<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_set_keys(libqcow_file_t*, const uint8_t*, size_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:322</i><br>
     * @deprecated use the safer methods {@link #libqcow_file_set_keys(com.sun.jna.ptr.PointerByReference, byte[], NativeLong, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_file_set_keys(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, NativeLong, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_file_set_keys(PointerByReference file, Pointer key, NativeLong key_size, PointerByReference error);
    /**
     * Sets the keys<br>
     * This function needs to be used before one of the open functions<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_set_keys(libqcow_file_t*, const uint8_t*, size_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:322</i>
     */
    int libqcow_file_set_keys(PointerByReference file, byte[] key, NativeLong key_size, PointerByReference error);
    /**
     * Sets an UTF-8 formatted password<br>
     * This function needs to be used before one of the open functions<br>
     * Returns 1 if successful, 0 if password is invalid or -1 on error<br>
     * Original signature : <code>int libqcow_file_set_utf8_password(libqcow_file_t*, const uint8_t*, size_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:333</i><br>
     * @deprecated use the safer methods {@link #libqcow_file_set_utf8_password(com.sun.jna.ptr.PointerByReference, byte[], NativeLong, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_file_set_utf8_password(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, NativeLong, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_file_set_utf8_password(PointerByReference file, Pointer utf8_string, NativeLong utf8_string_length, PointerByReference error);
    /**
     * Sets an UTF-8 formatted password<br>
     * This function needs to be used before one of the open functions<br>
     * Returns 1 if successful, 0 if password is invalid or -1 on error<br>
     * Original signature : <code>int libqcow_file_set_utf8_password(libqcow_file_t*, const uint8_t*, size_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:333</i>
     */
    int libqcow_file_set_utf8_password(PointerByReference file, byte[] utf8_string, NativeLong utf8_string_length, PointerByReference error);
    /**
     * Sets an UTF-16 formatted password<br>
     * This function needs to be used before one of the open functions<br>
     * Returns 1 if successful, 0 if password is invalid or -1 on error<br>
     * Original signature : <code>int libqcow_file_set_utf16_password(libqcow_file_t*, const uint16_t*, size_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:344</i><br>
     * @deprecated use the safer methods {@link #libqcow_file_set_utf16_password(com.sun.jna.ptr.PointerByReference, short[], NativeLong, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_file_set_utf16_password(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.ShortByReference, NativeLong, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_file_set_utf16_password(PointerByReference file, ShortByReference utf16_string, NativeLong utf16_string_length, PointerByReference error);
    /**
     * Sets an UTF-16 formatted password<br>
     * This function needs to be used before one of the open functions<br>
     * Returns 1 if successful, 0 if password is invalid or -1 on error<br>
     * Original signature : <code>int libqcow_file_set_utf16_password(libqcow_file_t*, const uint16_t*, size_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:344</i>
     */
    int libqcow_file_set_utf16_password(PointerByReference file, short[] utf16_string, NativeLong utf16_string_length, PointerByReference error);
    /**
     * Retrieves the media size<br>
     * Returns the 1 if succesful or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_media_size(libqcow_file_t*, size64_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:354</i><br>
     * @deprecated use the safer methods {@link #libqcow_file_get_media_size(com.sun.jna.ptr.PointerByReference, java.nio.LongBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_file_get_media_size(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.LongByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_file_get_media_size(PointerByReference file, LongByReference media_size, PointerByReference error);
    /**
     * Retrieves the media size<br>
     * Returns the 1 if succesful or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_media_size(libqcow_file_t*, size64_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:354</i>
     */
    int libqcow_file_get_media_size(PointerByReference file, LongBuffer media_size, PointerByReference error);
    /**
     * Retrieves the size of the UTF-8 encoded backing filename<br>
     * The returned size includes the end of string character<br>
     * Returns 1 if successful, 0 if not available or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_utf8_backing_filename_size(libqcow_file_t*, size_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:364</i>
     */
    int libqcow_file_get_utf8_backing_filename_size(PointerByReference file, NativeLongByReference utf8_string_size, PointerByReference error);
    /**
     * Retrieves the UTF-8 encoded backing filename<br>
     * The size should include the end of string character<br>
     * Returns 1 if successful, 0 if not available or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_utf8_backing_filename(libqcow_file_t*, uint8_t*, size_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:374</i><br>
     * @deprecated use the safer methods {@link #libqcow_file_get_utf8_backing_filename(com.sun.jna.ptr.PointerByReference, java.nio.ByteBuffer, NativeLong, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_file_get_utf8_backing_filename(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, NativeLong, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_file_get_utf8_backing_filename(PointerByReference file, Pointer utf8_string, NativeLong utf8_string_size, PointerByReference error);
    /**
     * Retrieves the UTF-8 encoded backing filename<br>
     * The size should include the end of string character<br>
     * Returns 1 if successful, 0 if not available or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_utf8_backing_filename(libqcow_file_t*, uint8_t*, size_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:374</i>
     */
    int libqcow_file_get_utf8_backing_filename(PointerByReference file, ByteBuffer utf8_string, NativeLong utf8_string_size, PointerByReference error);
    /**
     * Retrieves the size of the UTF-16 encoded backing filename<br>
     * The returned size includes the end of string character<br>
     * Returns 1 if successful, 0 if not available or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_utf16_backing_filename_size(libqcow_file_t*, size_t*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:385</i>
     */
    int libqcow_file_get_utf16_backing_filename_size(PointerByReference file, NativeLongByReference utf16_string_size, PointerByReference error);
    /**
     * Retrieves the UTF-16 encoded backing filename<br>
     * The size should include the end of string character<br>
     * Returns 1 if successful, 0 if not available or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_utf16_backing_filename(libqcow_file_t*, uint16_t*, size_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:395</i><br>
     * @deprecated use the safer methods {@link #libqcow_file_get_utf16_backing_filename(com.sun.jna.ptr.PointerByReference, java.nio.ShortBuffer, NativeLong, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_file_get_utf16_backing_filename(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.ShortByReference, NativeLong, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_file_get_utf16_backing_filename(PointerByReference file, ShortByReference utf16_string, NativeLong utf16_string_size, PointerByReference error);
    /**
     * Retrieves the UTF-16 encoded backing filename<br>
     * The size should include the end of string character<br>
     * Returns 1 if successful, 0 if not available or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_utf16_backing_filename(libqcow_file_t*, uint16_t*, size_t, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:395</i>
     */
    int libqcow_file_get_utf16_backing_filename(PointerByReference file, ShortBuffer utf16_string, NativeLong utf16_string_size, PointerByReference error);
    /**
     * Retrieves the number of snapshots<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_number_of_snapshots(libqcow_file_t*, int*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:405</i><br>
     * @deprecated use the safer methods {@link #libqcow_file_get_number_of_snapshots(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #libqcow_file_get_number_of_snapshots(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
     */
    @Deprecated
    int libqcow_file_get_number_of_snapshots(PointerByReference file, IntByReference number_of_snapshots, PointerByReference error);
    /**
     * Retrieves the number of snapshots<br>
     * Returns 1 if successful or -1 on error<br>
     * Original signature : <code>int libqcow_file_get_number_of_snapshots(libqcow_file_t*, int*, libqcow_error_t**)</code><br>
     * <i>native declaration : libqcow.h:405</i>
     */
    int libqcow_file_get_number_of_snapshots(PointerByReference file, IntBuffer number_of_snapshots, PointerByReference error);

    public static class ssize_t extends PointerType {
        public ssize_t(Pointer address) {
            super(address);
        }
        public ssize_t() {
            super();
        }
    };
    public static class FILE extends PointerType {
        public FILE(Pointer address) {
            super(address);
        }
        public FILE() {
            super();
        }
    };
}
